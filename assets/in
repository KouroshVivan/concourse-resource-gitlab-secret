#!/usr/local/bin/python
"""`in` binary for Concourse Gitlab resource type"""
import datetime
import json
import os
import logging
import sys

import gitlab

FORMAT = '%(asctime)-15s %(levelname)-7s %(name)-5s %(message)s'
logging.basicConfig(format=FORMAT, level=logging.INFO)
_LOGGER = logging.getLogger("in").getChild("gitlab")

DEFAULT_TIMEOUT = 3


def run():
    """This function read gitlab secrets in specific project

    ref: https://concourse.ci/implementing-resources.html#in
    """
    # Read input
    destination = sys.argv[1]
    input_raw_data = None
    with sys.stdin as stdin:
        input_raw_data = stdin.read()
    input_data = json.loads(input_raw_data)
    # Set variables
    debug = input_data["source"].get("debug", False)
    if debug:
        _LOGGER.setLevel(logging.DEBUG)
    _LOGGER.debug("`IN` for Gitlab resource type started")

    url = input_data["source"]["uri"]
    private_token = input_data["source"]["private_token"]
    project_path = input_data["source"]["project_path"]
    timeout = input_data["source"].get("timeout", DEFAULT_TIMEOUT)

    # Get data from Gitlab
    _LOGGER.debug("Get data from Gitlab `%s` and project `%s",
                  url, project_path)
    gl_client = gitlab.Gitlab(url,
                              private_token=private_token,
                              timeout=timeout)
    try:
        project = gl_client.projects.get(project_path)
    except gitlab.exceptions.GitlabError as exp:
        _LOGGER.error("Getting `%s` project: `%s`",
                      project_path, exp.error_message)
        sys.exit(1)
    if not os.path.exists(destination):
        os.makedirs(destination)
    try:
        secrets = project.variables.list(all=True)
    except gitlab.exceptions.GitlabError as exp:
        _LOGGER.error("Getting project secret",
                      exp.error_message)
        sys.exit(2)
    output_file = os.path.join(destination, "secrets.yml")
    with open(output_file, "w") as output_fh:
        for secret in secrets:
            id= secret.get_id()
            variable = project.variables.get(id)
            line = id + ": " + variable.value
            _LOGGER.debug("Getting GitLab Secret `%s`", id)
            output_fh.write(line + "\n")

    version = {"date": datetime.datetime.now().strftime("%s")}
    print(json.dumps({"version": version}))
    _LOGGER.debug("`IN` for GitLab Secret resource type completed")


if __name__ == '__main__':
    run()
